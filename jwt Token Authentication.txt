(1)First Step [appsettings.Json File]
"Jwt": {
    "Issuer": "your-issuer",
    "Audience": "your-audience",
    "SecretKey": "ABFVBDkdj8y8e38yb8bd389"
  }
  
(2)Secound Step [StartUp.cs File]
    services.AddAuthentication(e =>
            {
                e.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                e.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(s =>
            {
                s.SaveToken = true;
                s.TokenValidationParameters = new TokenValidationParameters()
                {
                    ValidateIssuer = true,
                    ValidateIssuerSigningKey = true,
                    ValidateAudience = true,
                    ValidAudience = Configuration.GetSection("Jwt")["Audience"],
                    ValidIssuer = Configuration.GetSection("Jwt")["Issuer"],
                    IssuerSigningKey = new SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes(Configuration.GetSection("Jwt")["SecretKey"]))
                };
            });
			
			
	(3)Third Step [Ganerate Token Code]
	 public IConfiguration _con;
        public GenerateToken(IConfiguration con)
        {
            _con=con;
        }
        [HttpGet]
        [AllowAnonymous]
        public string GenerateJwtToken()
        {
        	try
		{
		    var tokenHandler = new JwtSecurityTokenHandler();
		    byte[] key = Encoding.UTF8.GetBytes(_con["Jwt:SecretKey"]);
		    var credisial =new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256);
		    //var tokenDescriptor = new SecurityTokenDescriptor
		    //{
		    //    Subject = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, "kuldeep") }),
		    //    Expires = DateTime.UtcNow.AddHours(1),
		    //    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
		    //};
		    List<Claim> lstClaim = new List<Claim>();
		    lstClaim.Add(new Claim("Name", "Kulddep"));
		    var token = new JwtSecurityToken(_con["Jwt:Issuer"], _con["Jwt:Audience"], lstClaim, null, DateTime.Now.AddHours(1), signingCredentials: credisial);
		    //var token = tokenHandler.CreateToken(tokenDescriptor);
		    return tokenHandler.WriteToken(token);
		}
		catch (Exception ex)
		{
		    // Handle exception
		    Console.WriteLine($"Error generating JWT: {ex.Message}");
		    return null;
		}
            
        }
			
